{"version":3,"file":"runTests.js","sourceRoot":"","sources":["src/runTests.ts"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,KAAK,UAAU,IAAI;IACf,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAErD,MAAM,KAAK,GAAG;QACV,GAAG,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC;QACrC,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC;KACvC,CAAC;IACF,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACtB,IAAI,UAAoE,CAAC;QACzE,IAAI;YACA,UAAU,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;SACnC;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAA,gDAAiD,IAAK,GAAG,CAAC,CAAC;YAC5E,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,YAAY,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,OAAO;aACV;YACD,SAAS;SACZ;QAED,IAAI,QAAQ,GAAY,KAAK,CAAC;QAC9B,KAAK,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC7D,QAAQ,GAAG,IAAI,CAAC;YAChB,IAAI;gBACA,MAAM,IAAI,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAA,UAAW,IAAK,qBAAsB,QAAS,GAAG,CAAC,CAAC;aACxE;YAAC,OAAO,GAAG,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAA,QAAS,IAAK,sBAAuB,QAAS,GAAG,CAAC,CAAC;gBACpE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,OAAO,GAAG,IAAI,CAAC;gBACf,IAAI,YAAY,EAAE;oBACd,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChB,OAAO;iBACV;aACJ;SACJ;QAED,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,CAAC,GAAG,CAAC,KAAK,CAAA,2CAA4C,IAAK,GAAG,CAAC,CAAC;YACvE,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,YAAY,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,OAAO;aACV;SACJ;KACJ;IACD,IAAI,OAAO,EAAE;QACT,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACnB;AACL,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["/// <reference types=\"node\"/>\nimport glob from \"glob\";\nimport chalk from \"chalk\";\n\nasync function main() {\n    const abortOnError = process.argv.includes(\"--bail\");\n\n    const files = [\n        ...glob.sync(\"./async/**/*.tests.js\"),\n        ...glob.sync(\"./sync/**/*.tests.js\"),\n    ];\n    let errored = false;\n    for (const file of files) {\n        let testModule: { tests: { [key: string]: () => void | Promise<void> } };\n        try {\n            testModule = await import(file);\n        } catch (err) {\n            console.log(chalk`{red Failed to load tests} {blue > } {yellow ${ file }}`);\n            errored = true;\n            if (abortOnError) {\n                process.exit(1);\n                return;\n            }\n            continue;\n        }\n\n        let testsRan: boolean = false;\n        for (const [testName, test] of Object.entries(testModule.tests)) {\n            testsRan = true;\n            try {\n                await test();\n                console.log(chalk`{green ${ file }} {blue >} {green ${ testName }}`);\n            } catch (err) {\n                console.log(chalk`{red ${ file }} {blue >} {yellow ${ testName }}`);\n                console.log(err);\n                errored = true;\n                if (abortOnError) {\n                    process.exit(1);\n                    return;\n                }\n            }\n        }\n\n        if (!testsRan) {\n            console.log(chalk`{red No tests in file} {blue >} {yellow ${ file }}`);\n            errored = true;\n            if (abortOnError) {\n                process.exit(1);\n                return;\n            }\n        }\n    }\n    if (errored) {\n        process.exit(1);\n    }\n}\n\nmain().catch(console.error);\n"]}